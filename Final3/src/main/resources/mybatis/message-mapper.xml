<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="message">
	<!-- 시퀀스 생성 -->
	<select id="sequence" resultType="int">
		select message_seq.nextval from dual
	</select>
	
	<!-- 등록 -->
<!--  	
	<insert id="save">
		insert into message(
			message_no, message_sender, message_content, message_time, chatroom_no, message_reply
		)
		values(
			#{messageNo}, #{messageSender}, #{messageContent}, sysdate, #{chatroomNo}, #{messageReply}
		)
	</insert>
-->
	<insert id="save">
		insert into message(
			message_no, message_sender, message_content, message_time, chatroom_no
		)
		values(
			#{messageNo}, #{messageSender}, #{messageContent}, sysdate, #{chatroomNo}
		)
	</insert>
	
	<!-- 목록 -->
	<select id="list" resultType="MessageDto">
		select * from message where chatroom_no = #{chatroomNo} order by message_no asc
	</select>
	
	<!-- 무한스크롤 목록 -->
	<select id="listByPaging" resultType="MessageDto">
	    <include refid="top-n-header"></include>
	        select * from message where chatroom_no = #{chatroomNo} order by message_no asc
	    <include refid="top-n-footer"></include>
	</select>
	
	
	<!-- 메시지 총 개수 조회 -->
	<select id="count" resultType="Integer">
	    select count(*) from message where chatroom_no = #{chatroomNo}
	</select>
	
	<!-- 상단 -->
	<sql id="top-n-header">
	    <if test="startRow != null and endRow != null">
	        select * from (
	        select rownum rn, TMP.* from (
	    </if>
	</sql>
	
	<!-- 하단 -->
	<sql id="top-n-footer">
	    <if test="startRow != null and endRow != null">
	        ) TMP
	        ) where rn between #{startRow} and #{endRow}
	    </if>
	</sql>
	

	
	<!-- 이름찾기 -->
	<select id="listSetName" resultType="String">
		select e.emp_name 
			from emp e 
			join message m 
			on e.emp_no = m.message_sender 
		where m.message_no = #{messageNo}
	</select>
	
	<!-- 직책찾기 -->
	<select id="listSetGrade" resultType="String">
		select g.grade_name
			from emp e
			join grade g on e.grade_no = g.grade_no
			where e.emp_no = (select message_sender from message 
														where message_no = #{messageNo})
	</select>
	
	

	<!-- 상세 -->
	<select id="find" resultType="MessageDto">
		select * from message where message_no = #{messageNo}
	</select>
	
	
	<!-- 메시지 지우기 -->
	<delete id="deleteMessage">
		delete message where chatroom_no = #{chatroomNo}
	</delete>
	
	<!-- readCount -->
	<update id="updateReadCount" parameterType="int">
	    update message
	   		set read_count = read_count + 1
	    where message_no = #{messageNo}
	</update>
	
	<insert id="insertMessageRead">
	    insert into message_read (message_no, emp_no)
	    values (#{messageNo}, #{empNo})
	</insert>
	
	<select id="isReadMessage" resultType="Integer">
		select count(*) from message_read where message_no = #{messageNo} and emp_no = #{empNo}
	</select>
	
	<select id="unreadMessage" resultType="MessageInfoVO">
		select 
		    m.message_no,
		    m.chatroom_no,
		    m.message_content,
		    m.message_time,
		    coalesce((select count(distinct emp_no) 
		              from emp_chatroom 
		              where chatroom_no = m.chatroom_no) - 
		             count(distinct r.emp_no), 
		             (select count(distinct emp_no) 
		              from emp_chatroom 
		              where chatroom_no = m.chatroom_no)) as unread_count
		from 
		    message m
		left join 
		    message_read r on m.message_no = r.message_no
		group by 
		    m.message_no, m.chatroom_no, m.message_content, m.message_time
		order by 
		    m.message_time desc
	</select>
	
	<select id="countUnreadMessages" resultType="int">
	    select count(*)
		    from message m
		    left join message_read mr on m.message_no = mr.message_no and mr.emp_no = #{empNo}
	    where m.chatroom_no = #{chatroomNo} and mr.message_no is null
	</select>
	


</mapper>