{"version":3,"file":"static/js/934.3af07477.chunk.js","mappings":"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","sources":["components/Jumbotron.js","components/intergrated/BoardBlind/BoardBlind.js"],"sourcesContent":["//페이지의 제목 역할을 하는 컴포넌트\r\n\r\nfunction Jumbotron(props) {//props는 상위 컴포넌트에서 전달되는 값(=파라미터)\r\n    return (\r\n        <>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <div style={{backgroundColor: \"#FFC0CB\"}} className=\"p-4 text-light rounded\">\r\n                        <h1>{props.title}</h1>\r\n                        <p>{props.content}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import { useCallback, useEffect, useRef, useState, startTransition } from \"react\";\r\nimport { loginIdState } from '../../../components/utils/RecoilData';\r\nimport { useRecoilState } from 'recoil';\r\nimport Jumbotron from \"../../Jumbotron\";\r\nimport { IoMdAdd } from \"react-icons/io\";\r\nimport axios from \"../../utils/CustomAxios\";\r\nimport { Modal } from \"bootstrap\";\r\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { FaEdit, FaTrash } from \"react-icons/fa\";\r\nimport { IoMdHammer } from \"react-icons/io\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport { FaSearch } from 'react-icons/fa';\r\nimport throttle from \"lodash/throttle\";\r\nimport debounce from \"lodash/debounce\";\r\nimport InputEmoji from \"react-input-emoji\";\r\nimport '@radix-ui/themes/styles.css';\r\n\r\n\r\n\r\nfunction BoardBlind() {\r\n    const { blindWriterCompany } = useParams();\r\n    // state\r\n    const [boardBlinds, setBoardBlinds] = useState([]);\r\n    // const [blindEmpNo, setblindEmpNo] = useRecoilState(loginIdState); // 사용자의 blindEmpNo를 저장합니다.\r\n    const [loginId, setLoginId] = useRecoilState(loginIdState);\r\n    // useState 훅을 사용하여 회사 정보를 저장할 상태 추가\r\n    const [companyInfo, setCompanyInfo] = useState({});\r\n\r\n    const [backup, setBackup] = useState(null);//수정 시 복원을 위한 백업\r\n\r\n    // 검색창\r\n    const [searchKeyword, setSearchKeyword] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n\r\n    // //통합 검색  \r\n    // performSearch 함수 정의\r\n    const performSearch = useCallback(async () => {\r\n        // 검색을 수행하는 로직을 구현합니다. searchKeyword 상태를 사용하여 검색합니다.\r\n        // 검색 결과를 searchResults 상태로 업데이트합니다.\r\n    }, [searchKeyword]);\r\n\r\n    // 검색 아이콘 클릭 핸들러 함수 정의\r\n    const handleSearchClick = useCallback(() => {\r\n        performSearch(); // 검색 아이콘이 클릭될 때 performSearch 함수 호출\r\n    }, [performSearch]);\r\n\r\n    // 검색 입력 변경 핸들러 함수 정의\r\n    const handleSearchChange = useCallback((e) => {\r\n        setSearchKeyword(e.target.value); // 입력이 변경될 때 searchKeyword 상태를 업데이트합니다.\r\n    }, []);\r\n\r\n    // 댓글 입력창에서 입력이 발생할 때 실행할 함수\r\n    const handleEmojiChange = (text) => {\r\n        setReplyBlindInput({\r\n            ...replyBlindInput,\r\n            replyBlindContent: text\r\n        });\r\n    };\r\n\r\n    // 문서 필터링 함수 정의\r\n    const filterBoardBlinds = useCallback(() => {\r\n        return boardBlinds.filter(boardBlind =>\r\n            (boardBlind.blindNo && boardBlind.blindNo.toString().toLowerCase().includes(searchKeyword.toLowerCase())) ||\r\n            (boardBlind.blindTitle && typeof boardBlind.blindTitle === 'string' && boardBlind.blindTitle.toLowerCase().includes(searchKeyword.toLowerCase())) ||\r\n            (boardBlind.blindContent && typeof boardBlind.blindContent === 'string' && boardBlind.blindContent.toLowerCase().includes(searchKeyword.toLowerCase())) ||\r\n            (boardBlind.blindWriterNick && typeof boardBlind.blindWriterNick === 'string' && boardBlind.blindWriterNick.toLowerCase().includes(searchKeyword.toLowerCase()))\r\n            // Add other attributes for search here\r\n        );\r\n    }, [boardBlinds, searchKeyword]);\r\n\r\n    // 검색어에 따라 게시글 필터링\r\n    useEffect(() => {\r\n        const filteredBoardBlinds = boardBlinds.filter(boardBlind =>\r\n            boardBlind.blindTitle.toLowerCase().includes(searchKeyword.toLowerCase()) ||\r\n            boardBlind.blindContent.toLowerCase().includes(searchKeyword.toLowerCase()) //||\r\n            // boardBlind.blindWriterNick.toLowerCase().includes(searchKeyword.toLowerCase())\r\n        );\r\n        setSearchResults(filteredBoardBlinds);\r\n    }, [boardBlinds, searchKeyword]);\r\n\r\n\r\n\r\n    // 검색 키워드에 따라 문서 필터링\r\n    const filteredBoardBlinds = filterBoardBlinds();\r\n\r\n    const [input, setInput] = useState({\r\n        // blindNo:\"\",\r\n        blindTitle: \"\",\r\n        blindContent: \"\",\r\n        blindWriterNick: \"\",\r\n        // blindWriterCompany:\"\",\r\n        // blindWtime:\"\",\r\n        // blindEtime:\"\",\r\n        // blindView:\"\",\r\n        blindPassword: \"\",\r\n        // blindEmpNo:\"\"\r\n    });\r\n\r\n    //댓글 state\r\n    const [replyBlinds, setReplyBlinds] = useState([]);\r\n    const [replyBlindInput, setReplyBlindInput] = useState({\r\n        replyBlindContent: \"\", //댓글 내용\r\n        replyBlindNick: \"\", //댓글 작성자\r\n        blindNo: \"\" //게시글번호\r\n    });\r\n\r\n    //무한스크롤\r\n    const [page, setPage] = useState(1); //현재 페이지 번호\r\n    const [size, setSize] = useState(5); //가져올 데이터 개수\r\n    const [count, setCount] = useState(0);\r\n    const [last, setLast] = useState(false);\r\n\r\n    //ref의 변형된 사용법\r\n    // - ref는 주로 화면을 제어할 때 사용\r\n    // - ref는 state와 다르게 블로킹(blocking)이 된다는 특징이 있어서 state 대신도 사용\r\n    const loading = useRef(false);//목록을 불러오는 중이면 true, 아니면 false\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        loadData();\r\n        //fetchCompanyInfo(); // 회사 정보 가져오기 호출\r\n    }, [blindWriterCompany]);\r\n\r\n    // blind_emp\r\n\r\n    const loadData = useCallback(async () => {\r\n        const blindEmpNo = loginId;\r\n        const blindWriterCompany = companyInfo;\r\n        // const resp = await axios.get(\"/boardBlind/\");\r\n        const resp = await axios.get(`/boardBlind/page/${page}/size/${size}`);\r\n        setBoardBlinds([...boardBlinds, ...resp.data.list]);\r\n        setCount(resp.data.count);\r\n        setLast(resp.data.last);\r\n    }, [loginId, companyInfo, setBoardBlinds, page]);\r\n\r\n    //effect\r\n    // - 페이지 번호가 증가하면 loadData를 부르도록 연결\r\n    useEffect(() => {\r\n        loading.current = true;//로딩이 시작했음을 기록\r\n        console.log(\"로딩 시작\");\r\n        loadData();\r\n        loading.current = false;//로딩이 종료했음을 기록\r\n        console.log(\"로딩 종료\");\r\n    }, [page]);\r\n\r\n    ////////////////////////////////////////////////////////////////\r\n    // 스크롤 이벤트(Scroll Event)\r\n    // - 최초 화면 로드 시 윈도우에 스크롤 이벤트를 설정\r\n    // - 스크롤 이벤트는 너무 민감하기 때문에 (1회 굴리면 약 12번 실행) 억제\r\n    // - lodash 라이브러리를 사용하여 억제\r\n    //      - throttle \r\n    //              - 지정한 시간 간격으로만 이벤트가 실행(250ms마다 실행)\r\n    //              - throttle(함수, 간격)\r\n    //      - debounce - 지정한 시간동안 작업이 이어지지 않으면 이벤트가 실행\r\n    //              - debounce(함수, 간격)\r\n    ////////////////////////////////////////////////////////////////\r\n    const listener = useCallback(throttle((e) => {\r\n        if (loading.current === true) {//로딩이 진행중이라면\r\n            return;//스크롤 감지고 뭐고 때려쳐!\r\n        }\r\n\r\n        //console.log(\"우와 스크롤이 굴러가요\");\r\n        const scrollableHeight = document.documentElement.scrollHeight - window.innerHeight;\r\n        const scrollTop = window.scrollY;\r\n        const scrollPercent = (scrollTop / scrollableHeight) * 100;\r\n        console.log(`last = ${last} , 퍼센트 = ${scrollPercent.toFixed(2)}%`);\r\n\r\n        //조건 \r\n        // - 마지막 데이터가 아닐 것 (last === false)\r\n        // - 스크롤이 75% 이상 내려갔1을 것 (scrollPercent >= 75)\r\n        if (last === false && scrollPercent >= 75) {\r\n            console.log(\"더보기 작업을 시작합니다\");\r\n            setPage(page + 1);//페이지1증가 --> effect 발생 --> loadData 실행\r\n        }\r\n    }, 750), [page]);\r\n\r\n    //useEffect를 사용해서 필요한 순간에 이벤트를 설정 또는 제거\r\n    //- loading에 저장된 값을 활용\r\n    //- useEffect에 항목을 제거하면 화면이 갱신될 때마다 실행된다(모든 state 변화에 반응)\r\n    useEffect(() => {\r\n        if (loading.current === true) {//로딩이 진행중이라면\r\n            return;//이벤트 설정이고 뭐고 때려쳐!\r\n        }\r\n\r\n        //로딩중이 아니라면\r\n        window.addEventListener(\"scroll\", listener);//미리 준비한 이벤트 설정\r\n        console.log(\"스크롤 이벤트 설정 완료!\");\r\n\r\n        //화면 해제 시 진행할 작업\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", listener);//이벤트 제거\r\n            console.log(\"스크롤 이벤트 제거 완료!\");\r\n        };\r\n    }, [page]);\r\n\r\n\r\n    //신규 등록 화면 입력값 변경\r\n    const changeInput = useCallback((e) => {\r\n        setInput({\r\n            ...input,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }, [input]);\r\n\r\n    // saveInput 함수 내부에서 필요한 값만 서버에 전달하도록 수정\r\n    const saveInput = useCallback(async () => {\r\n        const resp = await axios.post(\"/boardBlind/\", input);\r\n        loadData();\r\n        clearInput();\r\n        closeModal();\r\n    }, [input]);\r\n\r\n    //입력값 초기화\r\n    const clearInput = useCallback(() => {\r\n        setInput({\r\n            blindTitle: \"\",\r\n            blindContent: \"\",\r\n            blindWriterNick: \"\",\r\n            blindPassword: \"\"\r\n        });\r\n    }, []);\r\n\r\n    // 저장 버튼 클릭 이벤트 핸들러\r\n    const saveEdit = useCallback(async (boardBlind) => {\r\n        // 수정된 내용을 서버에 저장\r\n        const resp = await axios.put(`/boardBlind/${boardBlind.blindNo}`, input);\r\n        loadData(); // 데이터 다시 불러오기\r\n        clearInput(); // 입력 폼 초기화\r\n    }, [input]);\r\n\r\n    const cancelEdit = useCallback(() => {\r\n        clearInput(); // 입력 폼 초기화\r\n    }, []);\r\n\r\n\r\n\r\n    //ref + modal\r\n    const bsModal = useRef();\r\n\r\n    const openModal = useCallback(() => {\r\n        const modal = new Modal(bsModal.current);\r\n        modal.show();\r\n    }, [bsModal]);\r\n\r\n    const closeModal = useCallback(() => {\r\n        const modal = Modal.getInstance(bsModal.current);\r\n        modal.hide();\r\n    }, [bsModal]);\r\n\r\n    //등록 취소\r\n    const cancelInput = useCallback(() => {\r\n        // const choice = window.confirm(\"작성을 취소하시겠습니까?\");\r\n        // if (choice === false) return;\r\n        clearInput();\r\n        closeModal();\r\n        // closeBModal();\r\n        // }, [clearInput, closeModal, closeBModal]);\r\n    }, [clearInput, closeModal]);\r\n\r\n    //해당 줄을 수정상태(edit===true)로 만드는 함수\r\n    //target은 수정을 누른 줄의 학생 정보\r\n    const editBoardBlind = useCallback((target) => {\r\n        //1. boardBlinds를 복제한다\r\n        const copy = [...boardBlinds];\r\n\r\n        //(+추가) 이미 수정중인 항목이 있을 수 있으므로 해당 항목은 취소 처리가 필요\r\n        const recover = copy.map(boardBlind => {\r\n            if (boardBlind.edit === true) {//수정중인 항목을 발견하면\r\n                return { ...backup, edit: false };//백업으로 갱신 + 수정모드 취소\r\n            }\r\n            else {\r\n                return { ...boardBlind };//그대로\r\n            }\r\n        });\r\n\r\n        //(+추가) 나중을 위해 target를 백업해둔다 (target은 수정버튼 누른항목)\r\n        setBackup({ ...target });\r\n\r\n        //2. recover를 고친다\r\n        //- recover 중에서 target과 동일한 정보를 가진 항목을 찾아서 edit : true로 만든다\r\n        //- 배열을 변환시켜야 하므로 map 함수를 사용한다\r\n        const copy2 = recover.map(boardBlind => {\r\n            //target : 수정버튼을 누른 학생정보, boardBlind : 현재 회차의 학생정보\r\n            if (target.blindNo === boardBlind.blindNo) {//원하는 정보일 경우\r\n                return {\r\n                    ...boardBlind,//나머지 정보는 유지하되\r\n                    edit: true,//edit 관련된 처리를 추가하여 반환\r\n                };\r\n            }\r\n            else {//원하는 정보가 아닐 경우\r\n                return { ...boardBlind };//데이터를 그대로 복제하여 반환\r\n            }\r\n        });\r\n\r\n\r\n        //3. copy2를 boardBlinds에 덮어쓰기한다\r\n        setBoardBlinds(copy2);\r\n    }, [boardBlinds]);\r\n\r\n    const cancelEditBoardBlind = useCallback((target) => {\r\n        //1. boardBlinds를 복제한다\r\n        const copy = [...boardBlinds];\r\n\r\n        //2. copy를 고친다\r\n        //- copy 중에서 target과 동일한 정보를 가진 항목을 찾아서 edit : true로 만든다\r\n        //- 배열을 변환시켜야 하므로 map 함수를 사용한다\r\n        const copy2 = copy.map(boardBlind => {\r\n            //target : 수정버튼을 누른 학생정보, boardBlind : 현재 회차의 학생정보\r\n            if (target.blindNo === boardBlind.blindNo) {//원하는 정보일 경우\r\n                return {\r\n                    ...backup,//백업 정보를 전달\r\n                    edit: false,//edit 관련된 처리를 추가하여 반환\r\n                };\r\n            }\r\n            else {//원하는 정보가 아닐 경우\r\n                return { ...boardBlind };//데이터를 그대로 복제하여 반환\r\n            }\r\n        });\r\n\r\n        //3. copy2를 boardBlinds에 덮어쓰기한다\r\n        setBoardBlinds(copy2);\r\n    }, [boardBlinds]);\r\n\r\n    //수정 입력창에서 입력이 발생할 경우 실행할 함수\r\n    //- boardBlinds 중에서 대상을 찾아 해당 필드를 교체하여 재설정\r\n    //- e는 입력이 발생한 창의 이벤트 정보\r\n    //- target은 입력이 발생한 창이 있는 줄의 학생정보\r\n    const changeBoardBlinds = useCallback((e, target) => {\r\n        const copy = [...boardBlinds];\r\n        const copy2 = copy.map(boardBlind => {\r\n            if (target.blindNo === boardBlind.blindNo) {//이벤트 발생한 학생이라면\r\n                return {\r\n                    ...boardBlind,//나머지 정보는 유지\r\n                    [e.target.name]: e.target.value//단, 입력항목만 교체\r\n                };\r\n            }\r\n            else {//다른 학생이라면\r\n                return { ...boardBlind };//현상유지\r\n            }\r\n        });\r\n        setBoardBlinds(copy2);\r\n    }, [boardBlinds]);\r\n\r\n    //수정된 결과를 저장 + 목록갱신 + 수정모드 해제\r\n    const saveEditboardBlind = useCallback(async (target) => {\r\n        //서버에 target을 전달하여 수정 처리\r\n        const resp = await axios.patch(\"/boardBlind/\", target);\r\n        //목록 갱신\r\n        loadData();\r\n    }, [boardBlinds]);\r\n\r\n\r\n    const deleteBoardBlind = useCallback(async (target) => {\r\n        const choice = window.confirm(\"정말 삭제하시겠습니까?\");\r\n        if (choice === false) return;\r\n\r\n        //target에 있는 내용을 서버에 지워달라고 요청하고 목록을 다시 불러온다\r\n        const resp = await axios.delete(\"/boardBlind/\" + target.blindNo);\r\n        loadData();\r\n    }, [boardBlinds]);\r\n\r\n\r\n    //댓글\r\n\r\n    useEffect(() => {\r\n        replyLoadData();\r\n    }, []);\r\n\r\n    const replyLoadData = useCallback(async () => {\r\n        const blindEmpNo = loginId;\r\n        const blindWriterCompany = companyInfo;\r\n        const resp = await axios.get(\"/replyBlind/\");\r\n        setReplyBlinds(resp.data);\r\n    }, [loginId, companyInfo]);\r\n\r\n    //신규 등록 화면 입력값 변경\r\n    const changeReply = useCallback((e) => {\r\n        setReplyBlindInput({\r\n            ...replyBlindInput,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }, [replyBlindInput]);\r\n    //등록\r\n    const saveReplyInput = useCallback(async (blindNo) => {\r\n        // 입력값에 대한 검사 코드가 필요하다면 이 자리에 추가하고 차단!\r\n        // if(검사 결과 이상한 데이터가 입력되어 있다면) return;\r\n\r\n        // 댓글 입력 데이터에 게시글 번호를 추가합니다.\r\n        const replyData = {\r\n            ...replyBlindInput,\r\n            blindNo: blindNo\r\n        };\r\n\r\n        // 서버로 전송하여 댓글을 등록한 뒤 목록을 갱신합니다.\r\n        const resp = await axios.post(\"/replyBlind/\", replyData);\r\n        replyLoadData();\r\n        clearReplyInput();\r\n        // closeModal(); // 필요에 따라 모달을 닫는 코드를 주석 해제할 수 있습니다.\r\n    }, [replyBlindInput, replyLoadData]);\r\n\r\n    //등록 취소\r\n    const cancelReplyInput = useCallback(() => {\r\n        const choice = window.confirm(\"작성을 취소하시겠습니까?\");\r\n        if (choice === false) return;\r\n        clearReplyInput();\r\n        // closeReplyModal();\r\n    }, [input]);\r\n    //입력값 초기화\r\n    const clearReplyInput = useCallback(() => {\r\n        setReplyBlindInput({\r\n            replyBlindNick: \"\", replyBlindContent: \"\"\r\n        });\r\n    }, [replyBlindInput]);\r\n\r\n    const deleteReplyBlind = useCallback(async (target) => {\r\n        const choice = window.confirm(\"정말 삭제하시겠습니까?\");\r\n        if (choice === false) return;\r\n\r\n        //target에 있는 내용을 서버에 지워달라고 요청하고 목록을 다시 불러온다\r\n        const resp = await axios.delete(\"/replyBlind/\" + target.replyBlindNo);\r\n        removeReplyFromScreen(target.replyBlindNo)\r\n        loadData();\r\n    }, [replyBlinds]);\r\n\r\n    //화면에서 해당 댓글을 제거하는 함수\r\n    const removeReplyFromScreen = useCallback((replyBlindNo) => {\r\n        // 현재 상태의 댓글 목록에서 삭제된 댓글을 제외하고 새로운 목록을 만듭니다.\r\n        const updatedReplyBlinds = replyBlinds.filter(reply => reply.replyBlindNo !== replyBlindNo);\r\n        // 새로운 목록으로 상태를 업데이트합니다.\r\n        setReplyBlinds(updatedReplyBlinds);\r\n    }, [replyBlinds, setReplyBlinds]);\r\n\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    function handleOnEnter(text) {\r\n        console.log(\"enter\", text);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"ListItem\">\r\n\r\n            <Jumbotron title=\"블라인드 게시판\"></Jumbotron>\r\n\r\n            {/* <div className=\"col-8 col-md-9 d-flex align-items-center\">\r\n                <input\r\n                    style={{ border: '2.5px solid pink', boxShadow: '0 4px 6px rgba(0, 0, 0.1, 0.2)' }}\r\n                    type=\"text\"\r\n                    className=\"form-control me-2\"\r\n                    placeholder=\"검색어를 입력하세요...\"\r\n                    value={searchKeyword}\r\n                    onChange={handleSearchChange}\r\n                />\r\n                <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={handleSearchClick}\r\n                    style={{ backgroundColor: 'rgb(255,192,203,0.5)' }}>\r\n                    <FaSearch />\r\n                </button>\r\n            </div> */}\r\n\r\n            <div className=\"row mt-4\">\r\n                <div className=\"col text-end\">\r\n                    <button className=\"btn btn-primary\" onClick={openModal}>\r\n                        <IoMdAdd />\r\n                        글쓰기\r\n                    </button>\r\n                </div>\r\n            </div>\r\n\r\n            <Container className=\"d-flex\" style={{ height: \"500px\", backgroundSize: \"cover\" }} fluid>\r\n                <Row xs={1} className=\"g-4 mt-4\">\r\n                    {boardBlinds.map((boardBlind) => (\r\n                        <Col key={boardBlind.blindNo}>\r\n                            <Card style={{ overflowY: \"auto\" }}>\r\n                                <Card.Body style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                                    <div className=\"d-flex justify-content-end mb-2\">\r\n                                        {loginId === boardBlind.blindEmpNo && (\r\n                                            <>\r\n                                                <button\r\n                                                    className=\"btn btn-warning btn-sm me-2\"\r\n                                                    onClick={(e) => editBoardBlind(boardBlind)}\r\n                                                ><IoMdHammer />\r\n\r\n                                                </button>\r\n                                                <button\r\n                                                    className=\"btn btn-danger btn-sm\"\r\n                                                    onClick={(e) => deleteBoardBlind(boardBlind)}\r\n                                                ><FaXmark />\r\n\r\n                                                </button>\r\n                                            </>\r\n                                        )}\r\n                                    </div>\r\n\r\n                                    {/* 수정 가능한 입력 상자 표시 */}\r\n                                    {boardBlind.edit ? (\r\n                                        <>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control mb-2\"\r\n                                                value={boardBlind.blindTitle}\r\n                                                name=\"blindTitle\"\r\n                                                onChange={(e) => changeBoardBlinds(e, boardBlind)}\r\n                                            />\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                className=\"form-control mb-2\"\r\n                                                value={boardBlind.blindContent}\r\n                                                name=\"blindContent\"\r\n                                                onChange={(e) => changeBoardBlinds(e, boardBlind)}\r\n                                                style={{\r\n                                                    height: \"300px\",\r\n                                                    border: \"1px solid rgb(210, 210, 210)\",\r\n                                                    borderRadius: \"10px\",\r\n                                                    padding: \"10px\",\r\n                                                    marginBottom: \"10px\"\r\n                                                }}\r\n                                            />\r\n\r\n                                            <button\r\n                                                className=\"btn btn-success btn-sm me-2\"\r\n                                                onClick={(e) => saveEditboardBlind(boardBlind)}\r\n                                            >\r\n                                                저장\r\n                                            </button>\r\n                                            <button\r\n                                                className=\"btn btn-danger btn-sm\"\r\n                                                onClick={(e) => cancelEditBoardBlind(boardBlind)}\r\n                                            >\r\n                                                취소\r\n                                            </button>\r\n                                        </>\r\n\r\n                                    ) : (\r\n                                        <>\r\n                                            {/* 수정 불가능한 텍스트로 표시 */}\r\n                                            <div className=\"rounded border p-2 mb-2 shadow-sm bg-light\">\r\n                                                제목: {boardBlind.blindTitle.toLowerCase().includes(searchKeyword.toLowerCase()) ? (\r\n                                                    <span>\r\n                                                        {boardBlind.blindTitle.split(new RegExp(`(${searchKeyword})`, 'ig')).map((text, index) => (\r\n                                                            text.toLowerCase() === searchKeyword.toLowerCase() ? (\r\n                                                                <span key={index} style={{ backgroundColor: 'pink' }}>{text}</span>\r\n                                                            ) : (\r\n                                                                <span key={index}>{text}</span>\r\n                                                            )\r\n                                                        ))}\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    boardBlind.blindTitle\r\n                                                )}\r\n                                            </div>\r\n\r\n                                            <hr />\r\n\r\n                                            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                                                <div style={{ border: \"0px solid rgb(210, 210, 210)\", borderRadius: \"10px\", padding: \"10px\", marginBottom: \"1px\", flex: \"1\", marginRight: \"10px\", fontSize: \"13px\" }}>\r\n                                                    <div><span style={{ fontWeight: \"bold\" }}>작성자:</span>{boardBlind.blindWriterNick ? boardBlind.blindWriterNick : 'ㅇㅇ'}</div>\r\n                                                </div>\r\n                                                <div style={{ border: \"0px solid rgb(210, 210, 210)\", borderRadius: \"10px\", padding: \"10px\", marginBottom: \"1px\", flex: \"1\", marginRight: \"10px\", fontSize: \"13px\" }}>\r\n                                                    <div><span style={{ fontWeight: \"bold\" }}>회사:</span> {boardBlind.blindWriterCompany}</div>\r\n                                                </div>\r\n                                                <div style={{ border: \"0px solid rgb(210, 210, 210)\", borderRadius: \"10px\", padding: \"10px\", marginBottom: \"1px\", flex: \"1\", fontSize: \"13px\" }}>\r\n                                                    <div><span style={{ fontWeight: \"bold\" }}>작성일:</span> {boardBlind.blindWtime}</div>\r\n                                                </div>\r\n                                            </div>\r\n\r\n                                            <hr />\r\n\r\n                                            <div style={{ minHeight: \"150px\", maxHeight:\"450px\", border: \"1px solid rgb(210, 210, 210)\", borderRadius: \"10px\", padding: \"10px\", marginBottom: \"10px\" }}>\r\n                                                내용: {boardBlind.blindContent.toLowerCase().includes(searchKeyword.toLowerCase()) ? (\r\n                                                    <span>\r\n                                                        {boardBlind.blindContent.split(new RegExp(`(${searchKeyword})`, 'ig')).map((text, index) => (\r\n                                                            text.toLowerCase() === searchKeyword.toLowerCase() ? (\r\n                                                                <span key={index} style={{ backgroundColor: 'pink' }}>{text}</span>\r\n                                                            ) : (\r\n                                                                <span key={index}>{text}</span>\r\n                                                            )\r\n                                                        ))}\r\n                                                    </span>\r\n                                                ) : (\r\n                                                    boardBlind.blindContent\r\n                                                )}\r\n                                            </div>\r\n                                        </>\r\n                                    )}\r\n\r\n                                    {/* 댓글 섹션 */}\r\n                                    <div style={{ minHeight: \"50px\", border: \"none\", maxHeight:\"500px\", borderRadius: \"10px\", padding: \"10px\", marginBottom: \"10px\", overflowY: \"auto\" }}>\r\n    {replyBlinds.map((replyBlind, index) => {\r\n        if (replyBlind.blindNo === boardBlind.blindNo) {\r\n            return (\r\n                <div key={`${replyBlind.blindNo}_${replyBlind.replyBlindTime}_${index}`} style={{ marginBottom: \"10px\" }}>\r\n                    <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n                        <div style={{ fontWeight: \"bold\" }}>\r\n                            {replyBlind.replyBlindNick ? replyBlind.replyBlindNick : 'ㅇㅇ'}\r\n                            <span style={{ marginLeft: \"10px\", fontWeight: \"normal\", color: \"gray\" }}>\r\n                                {` | ${replyBlind.replyBlindCompany} | ${new Date(replyBlind.replyBlindTime).getFullYear()}-${(new Date(replyBlind.replyBlindTime).getMonth() + 1).toString().padStart(2, '0')}-${new Date(replyBlind.replyBlindTime).getDate().toString().padStart(2, '0')} / ${new Date(replyBlind.replyBlindTime).getHours().toString().padStart(2, '0')}:${new Date(replyBlind.replyBlindTime).getMinutes().toString().padStart(2, '0')}`}\r\n                            </span>\r\n                        </div>\r\n                        {loginId === replyBlind.replyEmpNo && (\r\n                            <button\r\n                                className=\"btn btn-danger btn-sm\"\r\n                                onClick={(e) => deleteReplyBlind(replyBlind)}\r\n                                style={{\r\n                                    fontSize: '12px', \r\n                                    padding: '4px 8px', \r\n                                    transition: 'background-color 0.3s, border-color 0.3s',\r\n                                }}\r\n                                onMouseEnter={(e) => {\r\n                                    e.target.style.backgroundColor = '#ff6666';\r\n                                    e.target.style.borderColor = '#ff6666';\r\n                                }}\r\n                                onMouseLeave={(e) => {\r\n                                    e.target.style.backgroundColor = '';\r\n                                    e.target.style.borderColor = '';\r\n                                }}\r\n                            >\r\n                                <FaXmark />\r\n                            </button>\r\n                        )}\r\n                    </div>\r\n                    <div>{replyBlind.replyBlindContent}</div>\r\n                    <hr></hr>\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    })}\r\n</div>\r\n<form>\r\n    <div className=\"row\">\r\n        <div className=\"col-8\">\r\n            {/* 댓글 입력창을 앞에 두기 위해 순서를 변경 */}\r\n            <label>댓글</label>\r\n            <InputEmoji\r\n                value={replyBlindInput.replyBlindContent}\r\n                onChange={handleEmojiChange}\r\n                placeholder=\"댓글을 입력하세요\"\r\n                className=\"form-control\"\r\n            />\r\n        </div>\r\n        <div className=\"col-4\">\r\n            <label>닉네임</label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"replyBlindNick\"\r\n                value={replyBlindInput.replyBlindNick}\r\n                onChange={(e) => changeReply(e)}\r\n                className=\"form-control\"\r\n                placeholder=\"'ㅇㅇ' 으로 자동 입력됩니다\"\r\n                style={{borderRadius: '30px'}}\r\n            />\r\n        </div>\r\n    </div>\r\n\r\n    <div className=\"text-end mt-2\">\r\n        <button className='btn btn-success me-2' onClick={(e) => saveReplyInput(boardBlind.blindNo)}>\r\n            댓글등록\r\n        </button>\r\n    </div>\r\n</form>\r\n\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            </Container>\r\n\r\n\r\n\r\n            {boardBlinds.map(boardBlind => (\r\n                <div key={boardBlind.blindNo} ref={bsModal} className=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                    <div className=\"modal-dialog\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h1 className=\"modal-title fs-5\" id=\"staticBackdropLabel\">글쓰기</h1>\r\n                                <button type=\"button\" className=\"btn-close\" aria-label=\"Close\"\r\n                                    onClick={e => cancelInput()}></button>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <div>\r\n                                    <p>사원 번호: {loginId}</p>\r\n                                    <p>회사: {boardBlind.blindWriterCompany}</p>\r\n                                </div>\r\n                                <form>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <label>제목</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"blindTitle\"\r\n                                                value={input.blindTitle}\r\n                                                onChange={e => changeInput(e)}\r\n                                                className=\"form-control\"\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <label>내용</label>\r\n                                            <textarea\r\n                                                name=\"blindContent\"\r\n                                                value={input.blindContent}\r\n                                                onChange={e => changeInput(e)}\r\n                                                className=\"form-control\"\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <label>작성자 닉네임</label>\r\n                                            <input\r\n                                                type=\"text\"\r\n                                                name=\"blindWriterNick\"\r\n                                                value={input.blindWriterNick}\r\n                                                onChange={e => changeInput(e)}\r\n                                                className=\"form-control\"\r\n                                                placeholder=\"6글자만 가능합니다 / 입력을 원치 않을 경우 'ㅇㅇ'으로 자동 입력\"\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* <div className=\"row\">\r\n                                        <div className=\"col\">\r\n                                            <label>비밀번호</label>\r\n                                            <input\r\n                                                type=\"password\"\r\n                                                name=\"blindPassword\"\r\n                                                value={input.blindPassword}\r\n                                                onChange={e => changeInput(e)}\r\n                                                className=\"form-control\"\r\n                                            />\r\n                                        </div>\r\n                                    </div> */}\r\n                                </form>\r\n                            </div>\r\n\r\n                            <div className=\"modal-footer\">\r\n                                <button className='btn btn-success me-2' onClick={e => saveInput()}>\r\n                                    등록\r\n                                </button>\r\n                                <button className='btn btn-danger' onClick={e => cancelInput()}>\r\n                                    취소\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BoardBlind;\r\n\r\n"],"names":["props","_jsx","_Fragment","children","className","_jsxs","style","backgroundColor","title","content","blindWriterCompany","useParams","boardBlinds","setBoardBlinds","useState","loginId","setLoginId","useRecoilState","loginIdState","companyInfo","setCompanyInfo","backup","setBackup","searchKeyword","setSearchKeyword","searchResults","setSearchResults","performSearch","useCallback","async","handleEmojiChange","e","target","value","text","setReplyBlindInput","replyBlindInput","replyBlindContent","filterBoardBlinds","filter","boardBlind","blindNo","toString","toLowerCase","includes","blindTitle","blindContent","blindWriterNick","useEffect","filteredBoardBlinds","input","setInput","blindPassword","replyBlinds","setReplyBlinds","replyBlindNick","page","setPage","size","setSize","count","setCount","last","setLast","loading","useRef","loadData","resp","axios","get","concat","data","list","current","console","log","listener","throttle","scrollableHeight","document","documentElement","scrollHeight","window","innerHeight","scrollPercent","scrollY","toFixed","addEventListener","removeEventListener","changeInput","name","saveInput","post","clearInput","closeModal","bsModal","put","openModal","Modal","show","getInstance","hide","cancelInput","editBoardBlind","recover","map","edit","copy2","cancelEditBoardBlind","changeBoardBlinds","saveEditboardBlind","patch","deleteBoardBlind","confirm","delete","replyLoadData","changeReply","saveReplyInput","replyData","clearReplyInput","deleteReplyBlind","replyBlindNo","removeReplyFromScreen","updatedReplyBlinds","reply","setText","Jumbotron","onClick","IoMdAdd","Container","height","backgroundSize","fluid","Row","xs","Col","Card","overflowY","Body","display","flexDirection","blindEmpNo","IoMdHammer","FaXmark","type","onChange","border","borderRadius","padding","marginBottom","split","RegExp","index","flex","marginRight","fontSize","fontWeight","blindWtime","minHeight","maxHeight","replyBlind","justifyContent","alignItems","marginLeft","color","replyBlindCompany","Date","replyBlindTime","getFullYear","getMonth","padStart","getDate","getHours","getMinutes","replyEmpNo","transition","onMouseEnter","borderColor","onMouseLeave","InputEmoji","placeholder","ref","id","tabIndex"],"sourceRoot":""}