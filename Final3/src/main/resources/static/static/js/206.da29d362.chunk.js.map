{"version":3,"file":"static/js/206.da29d362.chunk.js","mappings":"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","sources":["components/intergrated/Chat/Chatroom.js"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { Modal } from \"bootstrap\";\r\nimport SockJS from 'sockjs-client';\r\nimport Draggable from 'react-draggable';\r\nimport throttle from \"lodash/throttle\";\r\nimport axios from \"../../utils/CustomAxios\";\r\nimport { useRecoilState } from 'recoil';\r\nimport { loginIdState } from \"../../utils/RecoilData\";\r\nimport { PiGearSixDuotone } from \"react-icons/pi\";\r\nimport { BsSend } from \"react-icons/bs\";\r\nimport { HiMagnifyingGlass } from \"react-icons/hi2\";\r\nimport { SlEmotsmile } from \"react-icons/sl\";\r\nimport './Chatroom.css';\r\n\r\nconst ChatRoom = () => {\r\n    const [chatrooms, setChatrooms] = useState([]);\r\n    const [chatroomNo, setChatroomNo] = useState(\"\");\r\n    const [emps, setEmps] = useState([]);\r\n    const [empInfos, setEmpInfos] = useState([]);\r\n    const [messages, setMessages] = useState([]);\r\n    const [messageInput, setMessageInput] = useState(\"\");\r\n    const [chatroomName, setChatroomName] = useState(\"\");\r\n    const [empInChatroom, setEmpInChatroom] = useState([]); //채팅방 참여자 목록\r\n    const [newChatroomName, setNewChatroomName] = useState(\"\"); //채팅방 이름 변경\r\n    const bsModal = useRef();\r\n    const bsEmpModal = useRef();\r\n    const bsEmpListModal = useRef();\r\n    const bsOutChatroomModal = useRef();\r\n    const bsChatroomNameChangeModal = useRef();\r\n    const scrollRef = useRef();\r\n    const textAreaRef = useRef(null);\r\n\r\n    const [showParticipants, setShowParticipants] = useState(false);\r\n    const [isChatModalOpen, setChatModalOpen] = useState(false);\r\n    const [isEmpListModalOpen, setEmpListModalOpen] = useState(false);\r\n    const [showChatroomInfo, setChatroomInfo] = useState(false);\r\n\r\n    //채팅방 이름 검색\r\n    const [showSearch, setShowSearch] = useState(false);\r\n    const [searchInput, setSearchInput] = useState(\"\");\r\n    const [searchResults, setSearchResults] = useState([]);\r\n\r\n    //채팅방 이름 검색 토글\r\n    const toggleSearch = () => {\r\n        setShowSearch(prev => !prev);\r\n        setSearchInput(\"\");\r\n        setSearchResults([]);\r\n    };\r\n\r\n    //검색 입력\r\n    const handleSearchInput = (e) => {\r\n        const value = e.target.value;\r\n        setSearchInput(value);\r\n\r\n        if (value.trim() !== \"\") {\r\n            const results = chatrooms.filter(chatroom =>\r\n                chatroom.chatroomName.toLowerCase().includes(value.toLowerCase())\r\n            );\r\n            setSearchResults(results);\r\n        }\r\n        else {\r\n            setSearchResults([]);\r\n        }\r\n    };\r\n\r\n    //검색결과 하이라이팅\r\n    const highlightText = (text, highlight) => {\r\n        const parts = text.split(new RegExp(`(${highlight})`, 'gi'));\r\n        return parts.map((part, index) =>\r\n            part.toLowerCase() === highlight.toLowerCase() ? (\r\n                <span key={index} className=\"highlight\">{part}</span>\r\n            ) : (\r\n                part\r\n            )\r\n        );\r\n    };\r\n\r\n    //사원 검색\r\n    const [showEmpSearch, setShowEmpSearch] = useState(false);\r\n    const [empSearchInput, setEmpSearchInput] = useState(\"\");\r\n    const [empSearchResults, setEmpSearchResults] = useState([]);\r\n\r\n    // 사원 검색 토글\r\n    const toggleEmpSearch = () => {\r\n        setShowEmpSearch(prev => !prev);\r\n        setEmpSearchInput(\"\");\r\n        setEmpSearchResults([]);\r\n    };\r\n\r\n    // 검색 입력 핸들러\r\n    const handleEmpSearchInput = (e) => {\r\n        const value = e.target.value;\r\n        setEmpSearchInput(value);\r\n\r\n        if (value.trim() !== \"\") {\r\n            const results = emps.filter(emp =>\r\n                emp.empName.toLowerCase().includes(value.toLowerCase())\r\n            );\r\n            setEmpSearchResults(results);\r\n        } else {\r\n            setEmpSearchResults([]);\r\n        }\r\n    };\r\n\r\n    //사원 초대 검색\r\n    const [inviteSearchInput, setInviteSearchInput] = useState(\"\");\r\n    const [inviteSearchResults, setInviteSearchResults] = useState([]);\r\n    const [showInviteSearch, setShowInviteSearch] = useState(false);\r\n\r\n    //사원 초대 검색 토글\r\n    const toggleInviteSearch = () => {\r\n        setShowInviteSearch(prev => !prev);\r\n        setInviteSearchInput(\"\");\r\n        setInviteSearchResults([]);\r\n    };\r\n\r\n    //초대 검색 입력 핸들러\r\n    const handleInviteSearchInput = (e) => {\r\n        const value = e.target.value;\r\n        setInviteSearchInput(value);\r\n\r\n        if (value.trim() !== \"\") {\r\n            const results = emps.filter(emp =>\r\n                emp.empName.toLowerCase().includes(value.toLowerCase())\r\n            );\r\n            setInviteSearchResults(results);\r\n        } else {\r\n            setInviteSearchResults([]);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    //참여자토글\r\n    const toggleParticipants = () => {\r\n        setShowParticipants(prev => {\r\n            //console.log('현재 상태:', prev, '바뀔 상태:', !prev);\r\n            return !prev;\r\n        });\r\n    };\r\n\r\n    //채팅방 관리(채팅방 나가기, 채팅방 이름 변경 등등..)\r\n    const manageChatroom = () => {\r\n        setChatroomInfo(prev => {\r\n            // console.log('현재 상태:', prev, '바뀔 상태:', !prev);\r\n            return !prev;\r\n        });\r\n    };\r\n\r\n    //recoil\r\n    const [loginId, setLoginId] = useRecoilState(loginIdState);\r\n\r\n\r\n    const [page, setPage] = useState(1);\r\n    const [size] = useState(40);\r\n    const [last, setLast] = useState(false);\r\n\r\n    const loading = useRef(false);\r\n\r\n    const lastAreaRef = useRef(null);\r\n    useEffect(() => {\r\n        if (lastAreaRef.current) {\r\n            lastAreaRef.current.scrollIntoView();\r\n        }\r\n    }, [messages]);\r\n\r\n    //메세지 읽었는지\r\n    // const sendReadMessageInfo = useCallback((messageNo) => {\r\n    //     const message = messages.find(msg => msg.messageNo === messageNo);\r\n    //     if (!message) return;  // 메시지를 찾지 못한 경우 함수를 종료\r\n\r\n    //     const readMessageRequest = {\r\n    //         readMessageNo: messageNo,\r\n    //         chatroomNo: chatroomNo,\r\n    //         token: axios.defaults.headers.common['Authorization'],\r\n    //         messageSender: message.messageSender,\r\n    //     };\r\n\r\n    //     if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\r\n    //         socketRef.current.send(JSON.stringify(readMessageRequest));\r\n    //     }\r\n    // }, [chatroomNo, messages]);\r\n\r\n\r\n\r\n    //채팅룸 불러오는 함수\r\n    useEffect(() => {\r\n        loadChatroomData();\r\n    }, []);\r\n\r\n    const loadChatroomData = useCallback(async () => {\r\n\r\n        const resp = await axios.get(\"/chat/list\");\r\n        if (resp.data) {\r\n            const chatroomsWithMessages = await Promise.all(\r\n                resp.data.map(async (chatroom) => {\r\n                    try {\r\n                        const messageResp = await axios.get(`/chat/recentMessageList/${chatroom.chatroomNo}`);\r\n                        const lastMessage = messageResp.data.length > 0 ? messageResp.data[0].messageContent : \"\";\r\n                        const lastMessageTime = messageResp.data.length > 0 ? messageResp.data[0].messageTimeMinute : \"\";\r\n                        return { ...chatroom, recentMessage: lastMessage, recentMessageTime: lastMessageTime };\r\n                    }\r\n                    catch (error) {\r\n                        return { ...chatroom, recentMessage: \"\", recentMessageTime: \"\" };\r\n                    }\r\n                })\r\n            );\r\n            setChatrooms(chatroomsWithMessages);\r\n        }\r\n\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    const loadCompanyEmpData = useCallback(async () => {\r\n        const resp = await axios.get(\"/emp/list\");\r\n        setEmps(resp.data);\r\n    }, []);\r\n\r\n    //사원 정보 불러오는 함수임\r\n    const loadEmpData = useCallback(async () => {\r\n        const resp = await axios.get(\"/emp/\");\r\n        setEmpInfos([resp.data]);\r\n    }, []);\r\n\r\n    //회사 사원 불러오는 함수임\r\n    useEffect(() => {\r\n        loadCompanyEmpData();\r\n        loadEmpData();\r\n    }, [])\r\n\r\n    //채팅룸 안에 있는 사람들 정보임\r\n    useEffect(() => {\r\n        loadEmpInChatroomData();\r\n    }, [chatroomNo])\r\n\r\n    const loadEmpInChatroomData = useCallback(async () => {\r\n        if (!chatroomNo) return;\r\n        const resp = await axios.get(`/chat/chatroomEmpList/${chatroomNo}`);\r\n        setEmpInChatroom(resp.data);\r\n    }, [chatroomNo])\r\n\r\n    //사원 초대하는 함수\r\n    const openEmpListModal = useCallback(() => {\r\n        loadCompanyEmpData();\r\n        const modal = new Modal(bsEmpListModal.current);\r\n        modal.show();\r\n    }, [loadCompanyEmpData, bsEmpListModal]);\r\n\r\n    const closeEmpListModal = useCallback(() => {\r\n        const modal = Modal.getInstance(bsEmpListModal.current)\r\n        modal.hide();\r\n    }, [bsEmpListModal]);\r\n\r\n    useEffect(() => {\r\n        inviteEmp();\r\n    }, [])\r\n\r\n\r\n    const inviteEmp = useCallback(async (empNo) => {\r\n        if (!chatroomNo) return;\r\n        const resp = await axios.post(`/chat/inviteEmp/${chatroomNo}/${empNo}`);\r\n        // console.log(resp.data);\r\n        if (resp.data) {\r\n            const newChatroomNo = resp.data.chatroomNo;\r\n\r\n            closeChatModal();\r\n            closeEmpListModal();\r\n            loadChatroomData();\r\n\r\n            setTimeout(() => {\r\n                setChatroomNo(newChatroomNo);\r\n                openChatModal(newChatroomNo);\r\n            }, 300);\r\n        }\r\n    }, [chatroomNo]);\r\n\r\n\r\n    //채팅방 이름 수정 함수\r\n    const changeChatroomName = useCallback(async () => {\r\n        const chatroomDto = {\r\n            chatroomNo: chatroomNo,\r\n            chatroomName: newChatroomName\r\n        };\r\n\r\n        const resp = await axios.patch(`/chat/`, chatroomDto);\r\n        if (resp.status === 200) {\r\n            setChatrooms(prevChatrooms =>\r\n                prevChatrooms.map(chatroom =>\r\n                    chatroom.chatroomNo === chatroomNo\r\n                        ? { ...chatroom, chatroomName: newChatroomName }\r\n                        : chatroom\r\n                )\r\n            );\r\n            setChatroomName(newChatroomName);\r\n            closeChatroomNameChangeModal();\r\n        }\r\n\r\n    }, [chatroomNo, newChatroomName]);\r\n\r\n    //채팅방 이름 수정 모달\r\n    const openChatroomNameChangeModal = useCallback((chatroomNo) => {\r\n        if (!chatroomNo) return;\r\n        const selectedChatroom = chatrooms.find(chatroom => chatroom.chatroomNo === chatroomNo);\r\n        if (selectedChatroom) {\r\n            setNewChatroomName(selectedChatroom.chatroomName);\r\n        }\r\n        const modal = new Modal(bsChatroomNameChangeModal.current);\r\n        modal.show();\r\n    }, [bsChatroomNameChangeModal, chatrooms]);\r\n\r\n    const closeChatroomNameChangeModal = useCallback(() => {\r\n        const modal = Modal.getInstance(bsChatroomNameChangeModal.current)\r\n        modal.hide();\r\n    }, [bsChatroomNameChangeModal]);\r\n\r\n\r\n\r\n    //메세지 불러오는 함수\r\n    const loadMessageData = useCallback(async () => {\r\n        try {\r\n            if (!chatroomNo) return;\r\n            const modalContent = bsModal.current.querySelector('.modal-body');\r\n            const oldScrollHeight = modalContent.scrollHeight; // 데이터 로드 전 스크롤 높이 저장\r\n            const resp = await axios.get(`/chat/${chatroomNo}/page/${page}/size/${size}`);\r\n            setMessages(prevMessages => [...resp.data.list, ...prevMessages]);\r\n            setLast(resp.data.last);\r\n\r\n            // resp.data.list.forEach(message => {\r\n            //     sendReadMessageInfo(message.messageNo);\r\n            // });\r\n\r\n            //최초에 불러온 경우는 스크롤을 아래로 이동\r\n            //console.log(resp.data.list.length, messages.length);\r\n            if (messages.length === 0 || resp.data.list.length === messages.length) {\r\n                //console.log(\"처음 불러왔어요\");\r\n                setTimeout(() => {\r\n                    // console.log(scrollRef.current, scrollRef.current.scrollTop, scrollRef.current.scrollHeight);\r\n                    scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\r\n                }, 200);\r\n            }\r\n            //최초가 아니라 나중에 추가한 경우 스크롤을 기존위치로 이동\r\n            else {\r\n                setTimeout(() => {\r\n                    //console.log(\"무한스크롤로 불러왔어요\");\r\n                    const newScrollHeight = modalContent.scrollHeight;\r\n                    modalContent.scrollTop = newScrollHeight - oldScrollHeight;\r\n                }, 10);\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error(\"에러임\", error);\r\n        }\r\n    }, [chatroomNo, page, size]);\r\n\r\n    const socketRef = useRef(null);\r\n    useEffect(() => {\r\n        if (chatroomNo) {\r\n            const connectWebSocket = () => {\r\n                if (socketRef.current) {\r\n                    socketRef.current.close();\r\n                }\r\n                const newSocket = new SockJS(\"http://192.168.30.6:8080/ws/emp\");\r\n                newSocket.onopen = () => {\r\n                    socketRef.current = newSocket;\r\n                };\r\n                newSocket.onmessage = (e) => {\r\n                    const newMessage = JSON.parse(e.data);\r\n                    setMessages(prevMessages => [...prevMessages, newMessage]);\r\n                    loadChatroomData();\r\n                };\r\n                loadMessageData();\r\n            };\r\n            connectWebSocket();\r\n\r\n            return () => {\r\n                if (socketRef.current) {\r\n                    socketRef.current.close();\r\n                }\r\n            };\r\n        }\r\n    }, [chatroomNo, loadMessageData]);\r\n\r\n    //textarea 높이 입력 내용에 맞게 조정\r\n    const handleInputChange = (e) => {\r\n        setMessageInput(e.target.value);\r\n        e.target.style.height = '65px';  //높이를 초기화\r\n        e.target.style.height = `${e.target.scrollHeight}px`;  //스크롤 크기만큼 높이 설정\r\n    };\r\n\r\n    //메세지 보내는 부분\r\n    const sendMessage = () => {\r\n        if (!messageInput.trim() || !socketRef.current) return;\r\n        const message = {\r\n            token: axios.defaults.headers.common['Authorization'],\r\n            messageContent: messageInput.trim(),\r\n            chatroomNo: chatroomNo\r\n        };\r\n        const json = JSON.stringify(message);\r\n        socketRef.current.send(json);\r\n\r\n        setMessageInput(\"\"); //입력한 부분 초기화\r\n        if (textAreaRef.current) {\r\n            textAreaRef.current.style.height = '65px';\r\n        }\r\n        loadChatroomData();\r\n    };\r\n\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {  //Shift 키와 함께 Enter 키를 누르면 줄바꿈\r\n            e.preventDefault();  //기본 Enter 이벤트(새 줄 추가) 방지\r\n            sendMessage();\r\n        }\r\n    };\r\n\r\n    const closeChatModal = useCallback(() => {\r\n        if (bsModal.current) {\r\n            const modal = Modal.getInstance(bsModal.current);\r\n            if (modal) {\r\n                modal.hide();\r\n            }\r\n        }\r\n        setChatroomNo(\"\");\r\n        setMessages([]);\r\n        setShowParticipants(false);\r\n        setChatroomInfo(false);\r\n        setMessageInput(\"\");\r\n        setInviteSearchInput(\"\");\r\n        setShowInviteSearch(false);\r\n        if (bsEmpListModal.current) {\r\n            const empListModal = Modal.getInstance(bsEmpListModal.current);\r\n            if (empListModal) {\r\n                empListModal.hide();\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const modalScrollListener = useCallback(throttle(() => {\r\n        if (!loading.current && !last) {\r\n            const modalContent = bsModal.current.querySelector('.modal-body');\r\n            if (modalContent) {\r\n                const modalScrollTop = modalContent.scrollTop;\r\n                // const modalScrollHeight = modalContent.scrollHeight;\r\n                // const modalClientHeight = modalContent.clientHeight;\r\n                if (modalScrollTop === 0 && !last) { //맨 위에 도달했을 때 페이지 추가\r\n                    setPage(prevPage => prevPage + 1);\r\n                }\r\n            }\r\n        }\r\n    }, 300), [last]);\r\n\r\n    const closeOutChatroomModal = useCallback(() => {\r\n        if (bsOutChatroomModal.current) {\r\n            const modal = Modal.getInstance(bsOutChatroomModal.current);\r\n            if (modal) {\r\n                modal.hide();\r\n            }\r\n        }\r\n    }, [bsOutChatroomModal]);\r\n\r\n    const outChatroom = useCallback(async (chatroomNo) => {\r\n        if (!chatroomNo) return;\r\n\r\n        try {\r\n            const resp = await axios.delete(`/chat/outChatroom/${chatroomNo}`);\r\n            if (resp.status === 200) {\r\n                setChatrooms(chatrooms => chatrooms.filter(c => c.chatroomNo !== chatroomNo));\r\n                closeOutChatroomModal();\r\n                closeChatModal();\r\n                loadEmpInChatroomData();\r\n                loadChatroomData();\r\n            }\r\n        } \r\n        catch (error) {\r\n            if (error.response && error.response.status === 404) {\r\n                //채팅방이 이미 삭제된 경우\r\n                setChatrooms(chatrooms => chatrooms.filter(c => c.chatroomNo !== chatroomNo));\r\n                closeOutChatroomModal();\r\n                closeChatModal();\r\n                loadEmpInChatroomData();\r\n                loadChatroomData();\r\n            } else {\r\n                console.error(\"Error leaving chatroom:\", error);\r\n            }\r\n        }\r\n    }, [setChatrooms, closeOutChatroomModal, closeChatModal, loadEmpInChatroomData, loadChatroomData]);\r\n\r\n    const openOutChatroomModal = useCallback((chatroomNo) => {\r\n        if (!chatroomNo) return;\r\n        if (bsOutChatroomModal.current) {\r\n            const modal = new Modal(bsOutChatroomModal.current);\r\n            modal.show();\r\n        }\r\n    }, [bsOutChatroomModal]);\r\n\r\n    //모달오픈\r\n    const openChatModal = useCallback((chatroomNo) => {\r\n        if (bsModal.current) {\r\n            const modal = new Modal(bsModal.current);\r\n            setChatroomNo(chatroomNo);\r\n\r\n            const selectedChatroom = chatrooms.find(chatroom => chatroom.chatroomNo === chatroomNo);\r\n            if (selectedChatroom) {\r\n                setChatroomName(selectedChatroom.chatroomName);\r\n                modal.show();\r\n                setPage(1);\r\n                loadMessageData();\r\n            }\r\n        }\r\n    }, [bsModal, chatrooms, loadMessageData]);\r\n\r\n\r\n    useEffect(() => {\r\n        const modalContent = bsModal.current ? bsModal.current.querySelector('.modal-body') : null;\r\n\r\n        if (modalContent) {\r\n            modalContent.addEventListener(\"scroll\", modalScrollListener);\r\n\r\n            const handleEscKeyPress = (event) => {\r\n                try {\r\n                    if (event.key === 'Escape') {\r\n                        closeChatModal();\r\n                        closeChatroomNameChangeModal();\r\n                        closeOutChatroomModal();\r\n                    }} catch (error) {\r\n                        console.error('Error handling Escape key press:', error);\r\n                    }\r\n                \r\n            };\r\n\r\n            // document.addEventListener('mousedown', handleOutsideModalClick);\r\n            document.addEventListener('keydown', handleEscKeyPress);\r\n\r\n            return () => {\r\n                modalContent.removeEventListener(\"scroll\", modalScrollListener);\r\n                document.removeEventListener('keydown', handleEscKeyPress);\r\n            };\r\n        }\r\n    }, [bsModal, closeChatModal, closeChatroomNameChangeModal, closeOutChatroomModal, loadMessageData, modalScrollListener]);\r\n\r\n    //모달 스크롤 이벤트제어\r\n    useEffect(() => {\r\n        const modalContent = bsModal.current.querySelector('.modal-body');\r\n        if (modalContent) {\r\n            modalContent.addEventListener(\"scroll\", modalScrollListener);\r\n\r\n            return () => {\r\n                modalContent.removeEventListener(\"scroll\", modalScrollListener);\r\n            };\r\n        }\r\n    }, [modalScrollListener]);\r\n\r\n\r\n    //사원 모달\r\n    const openEmpModal = useCallback((empNo) => {\r\n        const selectedEmpInfo = emps.find(emp => emp.empNo === empNo);\r\n        if (selectedEmpInfo) {\r\n            setEmpInfos([selectedEmpInfo]);\r\n        }\r\n        else {\r\n            setEmpInfos([]); // 찾지 못했을 때 빈 배열로 설정\r\n        }\r\n        const modal = new Modal(bsEmpModal.current);\r\n        modal.show();\r\n    }, [emps, bsEmpModal]);\r\n\r\n    const closeEmpModal = useCallback(() => {\r\n        const modal = Modal.getInstance(bsEmpModal.current)\r\n        modal.hide();\r\n    }, [bsEmpModal]);\r\n\r\n    const startChatWithEmp = async (selectedEmpNo) => {\r\n\r\n        const resp = await axios.post(`chat/findOrCreate/${selectedEmpNo}`);\r\n        if (resp.data) {\r\n            closeEmpModal();\r\n            openChatModal(resp.data.chatroomNo);\r\n            loadChatroomData();\r\n            //console.log(\"chatroomNo :\", resp.data.chatroomNo);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row mt-4\">\r\n                <div className=\"col-md-6 chat-goods\">\r\n                    <table className=\"table\">\r\n                        <thead className=\"text-center\">\r\n                            <tr>\r\n                                <th>\r\n                                    내 채팅방\r\n                                    <span className=\"magnifyingGlass ms-2 clickable\" onClick={toggleSearch}>\r\n                                        <HiMagnifyingGlass />\r\n                                    </span>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <div className={`chatroom-search-wrapper ${showSearch ? 'show' : ''}`}>\r\n                            {showSearch && (\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control mt-2\"\r\n                                    placeholder=\"채팅방 이름 검색\"\r\n                                    value={searchInput}\r\n                                    onChange={handleSearchInput}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                        <tbody className=\"chat-tbody\">\r\n                            {(searchResults.length > 0 ? searchResults : chatrooms).map(chatroom => (\r\n                                <React.Fragment key={chatroom.chatroomNo}>\r\n                                    <tr onClick={() => openChatModal(chatroom.chatroomNo)}>\r\n                                        <td>\r\n                                            <span className=\"chatroom-name\">\r\n                                                {searchInput ? highlightText(chatroom.chatroomName, searchInput) : chatroom.chatroomName} <br />\r\n                                            </span>\r\n                                            <span className=\"last-message mt-2\">\r\n                                                {chatroom.recentMessage || \"\"}\r\n                                            </span>\r\n                                            <span className=\"last-message-time\">\r\n                                                {chatroom.recentMessageTime || \"\"}\r\n                                            </span>\r\n                                        </td>\r\n                                    </tr>\r\n                                </React.Fragment>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <div className=\"col-md-6 table-emp chat-goods\">\r\n                    <table className=\"table\">\r\n                        <thead className=\"text-center\">\r\n                            <tr>\r\n                                <th>\r\n                                    우리회사 사원 ♥\r\n                                    <span className=\"magnifyingGlass ms-2 clickable\" onClick={toggleEmpSearch}>\r\n                                        <HiMagnifyingGlass />\r\n                                    </span>\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <div className={`emp-search-wrapper ${showEmpSearch ? 'show' : ''}`}>\r\n                            {showEmpSearch && (\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control mt-2\"\r\n                                    placeholder=\"사원 이름 검색\"\r\n                                    value={empSearchInput}\r\n                                    onChange={handleEmpSearchInput}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                        <tbody className=\"text-center chat-tbody\">\r\n                            {(empSearchResults.length > 0 ? empSearchResults : emps).map(emp => (\r\n                                <tr key={emp.empNo} onClick={() => openEmpModal(emp.empNo)}>\r\n                                    <td>{empSearchInput ? highlightText(emp.empName, empSearchInput) : emp.empName} ({emp.empGrade})</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div ref={bsModal} className=\"modal fade\" id=\"chatModal\" data-bs-backdrop=\"static\" tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                <Draggable cancel=\".form-control, .chat-container\">\r\n                    <div className=\"modal-dialog modal-dialog-scrollable\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <div className='col-3'>\r\n                                    <button className=\"btn btn-secondary clickable\" onClick={toggleParticipants}>참여자</button>\r\n                                    <ul className={`participants-sidebar ${showParticipants ? 'expanded' : ''}`}>\r\n                                        {empInChatroom.map(emp => (\r\n                                            <div key={emp.empNo} className=\"participant-list\">{emp.empName} ({emp.empGrade})</div>\r\n                                        ))}\r\n                                        <button className=\"mt-2 btn btn-secondary\" onClick={() => openEmpListModal(chatroomNo)}>사원초대</button>\r\n                                    </ul>\r\n                                </div>\r\n                                <p className=\"modal-title chatroom-name\" id=\"staticBackdropLabel\">\r\n                                    {chatroomName}\r\n                                </p>\r\n                                <p className=\"modal-title gear clickable\" onClick={manageChatroom}>\r\n                                    <PiGearSixDuotone />\r\n                                </p>\r\n                                <ul className={`manageChatroom-sidebar ${showChatroomInfo ? 'expanded' : ''}`}>\r\n                                    {chatroomName}<br />\r\n                                    <button className=\"mt-2 btn btn-secondary\" onClick={() => openChatroomNameChangeModal(chatroomNo)}>채팅방이름수정</button>\r\n                                    <button className=\"mt-2 btn btn-danger\" onClick={() => openOutChatroomModal(chatroomNo)}>채팅방나가기</button>\r\n                                </ul>\r\n                                <button type=\"button\" className=\"btn-close\" onClick={closeChatModal}></button>\r\n                            </div>\r\n\r\n                            <div className=\"modal-body\" ref={scrollRef}>\r\n                                <div className=\"chat-container\">\r\n                                    {messages.map(message => (\r\n                                        <div key={message.messageNo} className={`chat-bubble ${message.messageSender === loginId ? 'mine' : 'others'}`}>\r\n                                            {message.messageSender !== loginId && (\r\n                                                <div className=\"sender-info\">\r\n                                                    {message.messageSenderName} ({message.messageSenderGrade})\r\n                                                </div>\r\n                                            )}\r\n                                            <div className=\"message-content\">\r\n                                                <div dangerouslySetInnerHTML={{ __html: message.messageContent.replace(/\\n/g, '<br />') }} />\r\n                                            </div>\r\n                                            <div className=\"message-time\">{message.messageTimeMinute}</div>\r\n                                            {/* <div>{message.readCountForChatroom > 0 ? message.readCountForChatroom : ''}</div> */}\r\n                                        </div>\r\n                                    ))}\r\n                                    <div className=\"last-area\" ref={lastAreaRef}></div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"modal-footer\">\r\n                                <textarea\r\n                                    className=\"form-control\"\r\n                                    placeholder=\"메세지를 입력하세요.\"\r\n                                    ref={textAreaRef}\r\n                                    value={messageInput}\r\n                                    onChange={handleInputChange}\r\n                                    onKeyDown={handleKeyDown}\r\n                                />\r\n                                <button className=\"btn btn-pink\" onClick={sendMessage}>\r\n                                    <BsSend />\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </Draggable>\r\n            </div>\r\n\r\n\r\n            <div ref={bsEmpModal} className=\"modal fade\" id=\"staticBackdrop\" tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog modal-dialog-scrollable\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h1 className=\"modal-title fs-5\" id=\"staticBackdropLabel\">사원정보</h1>\r\n                            <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={closeEmpModal}></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <table className=\"table text-center\">\r\n                                <tbody className=\"\">\r\n                                    {empInfos.map(empInfo => (\r\n                                        <React.Fragment key={empInfo.empNo}>\r\n                                            <tr>\r\n                                                <td>사원명</td>\r\n                                                <td>{empInfo.empName}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>사원번호</td>\r\n                                                <td>{empInfo.empNo}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>소속부서</td>\r\n                                                <td>{empInfo.empDept}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>연락처</td>\r\n                                                <td>{empInfo.empContact}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>이메일</td>\r\n                                                <td>{empInfo.empEmail}</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>자기소개</td>\r\n                                                <td>{empInfo.empPr}</td>\r\n                                            </tr>\r\n                                        </React.Fragment>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            {empInfos.map(empInfo => (\r\n                                empInfo.empNo !== loginId && (\r\n                                    <button key={empInfo.empNo} className=\"btn btn-pink\" onClick={() => startChatWithEmp(empInfo.empNo)}>\r\n                                        채팅하기\r\n                                    </button>\r\n                                )\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div ref={bsEmpListModal} id=\"empListModal\" className=\"modal fade\" tabIndex=\"-1\">\r\n                <div className=\"modal-dialog modal-dialog-scrollable\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\">☆사원 초대☆</h5>\r\n                            <span className=\"magnifyingGlass ms-2 clickable\" onClick={toggleInviteSearch}>\r\n                                <HiMagnifyingGlass />\r\n                            </span>\r\n                            <button type=\"button\" className=\"btn-close\" onClick={e => closeEmpListModal()}></button>\r\n                        </div>\r\n                        <div className={`invite-search-wrapper ${showInviteSearch ? 'show' : ''}`}>\r\n                            {showInviteSearch && (\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control mt-2\"\r\n                                    placeholder=\"사원 이름 검색\"\r\n                                    value={inviteSearchInput}\r\n                                    onChange={handleInviteSearchInput}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <table className=\"table\">\r\n                                <tbody>\r\n                                    {(inviteSearchResults.length > 0 ? inviteSearchResults : emps).filter(emp => !empInChatroom.some(e => e.empNo === emp.empNo)).map(emp => (\r\n                                        <tr key={emp.empNo}>\r\n                                            <td onClick={() => inviteEmp(emp.empNo)}>\r\n                                                {inviteSearchInput ? highlightText(emp.empName, inviteSearchInput) : emp.empName} ({emp.empGrade})\r\n                                            </td>\r\n                                        </tr>\r\n                                    ))}\r\n                                </tbody>\r\n                            </table>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div ref={bsChatroomNameChangeModal} className=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h1 className=\"modal-title fs-5\" id=\"staticBackdropLabel\">♡채팅방 이름 변경 ^___^♡</h1>\r\n                            <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={e => closeChatroomNameChangeModal()}></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"newChatroomName\"\r\n                                    placeholder=\"변경할 채팅방 이름을 입력하세요.\"\r\n                                    value={newChatroomName}\r\n                                    onChange={e => setNewChatroomName(e.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-pink\" onClick={changeChatroomName}>이름 변경</button>\r\n                            <button type=\"button\" className=\"btn btn-secondary\" onClick={closeChatroomNameChangeModal}>닫기</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div ref={bsOutChatroomModal} className=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabIndex=\"-1\" aria-labelledby=\"staticBackdropLabel\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h1 className=\"modal-title fs-5\" id=\"staticBackdropLabel\">ㄹㅇ 나가실건가요 ..? ..</h1>\r\n                            <button type=\"button\" className=\"btn-close\" aria-label=\"Close\" onClick={e => closeOutChatroomModal()}></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            나가기버튼 눌렀을때 나오는거\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={() => outChatroom(chatroomNo)}>나가기</button>\r\n                            <button type=\"button\" className=\"btn btn-pink\" onClick={closeOutChatroomModal}>안나가기</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ChatRoom;"],"names":["ChatRoom","chatrooms","setChatrooms","useState","chatroomNo","setChatroomNo","emps","setEmps","empInfos","setEmpInfos","messages","setMessages","messageInput","setMessageInput","chatroomName","setChatroomName","empInChatroom","setEmpInChatroom","newChatroomName","setNewChatroomName","bsModal","useRef","bsEmpModal","bsEmpListModal","bsOutChatroomModal","bsChatroomNameChangeModal","scrollRef","textAreaRef","showParticipants","setShowParticipants","isChatModalOpen","setChatModalOpen","isEmpListModalOpen","setEmpListModalOpen","showChatroomInfo","setChatroomInfo","showSearch","setShowSearch","searchInput","setSearchInput","searchResults","setSearchResults","highlightText","text","highlight","split","RegExp","concat","map","part","index","toLowerCase","_jsx","className","children","showEmpSearch","setShowEmpSearch","empSearchInput","setEmpSearchInput","empSearchResults","setEmpSearchResults","inviteSearchInput","setInviteSearchInput","inviteSearchResults","setInviteSearchResults","showInviteSearch","setShowInviteSearch","loginId","setLoginId","useRecoilState","loginIdState","page","setPage","size","last","setLast","loading","lastAreaRef","useEffect","current","scrollIntoView","loadChatroomData","useCallback","async","resp","axios","get","data","chatroomsWithMessages","Promise","all","messageResp","chatroom","lastMessage","length","messageContent","lastMessageTime","messageTimeMinute","recentMessage","recentMessageTime","error","loadCompanyEmpData","loadEmpData","loadEmpInChatroomData","openEmpListModal","Modal","show","closeEmpListModal","getInstance","hide","inviteEmp","post","empNo","newChatroomNo","closeChatModal","setTimeout","openChatModal","changeChatroomName","chatroomDto","patch","status","prevChatrooms","closeChatroomNameChangeModal","openChatroomNameChangeModal","selectedChatroom","find","loadMessageData","modalContent","querySelector","oldScrollHeight","scrollHeight","prevMessages","list","scrollTop","newScrollHeight","console","socketRef","connectWebSocket","close","newSocket","SockJS","onopen","onmessage","e","newMessage","JSON","parse","sendMessage","trim","message","token","defaults","headers","common","json","stringify","send","style","height","modal","empListModal","modalScrollListener","throttle","prevPage","closeOutChatroomModal","outChatroom","delete","filter","c","response","openOutChatroomModal","addEventListener","handleEscKeyPress","event","key","document","removeEventListener","openEmpModal","selectedEmpInfo","emp","closeEmpModal","_jsxs","_Fragment","onClick","toggleSearch","prev","HiMagnifyingGlass","type","placeholder","value","onChange","target","results","includes","React","toggleEmpSearch","empName","empGrade","ref","id","tabIndex","Draggable","cancel","toggleParticipants","manageChatroom","PiGearSixDuotone","messageSender","messageSenderName","messageSenderGrade","dangerouslySetInnerHTML","__html","replace","messageNo","onKeyDown","shiftKey","preventDefault","BsSend","empInfo","empDept","empContact","empEmail","empPr","selectedEmpNo","startChatWithEmp","toggleInviteSearch","some"],"sourceRoot":""}